#!/usr/bin/env python

# Author: Tanay Agarwal (tagarwa2)

import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--num_iterations", dest="num_iters", default=10, help="Number of iterations to run EM (default=10)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with IBM Model 1............")
# IBM Model 1 pseudocode obtained from http://mt-class.org/jhu/slides/lecture-ibm-model1.pdf

bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(e_data), open(f_data))[:opts.num_sents]]
t_ef = {}
for (n, (e, f)) in enumerate(bitext):
  for e_i in set(e):
    for f_j in set(f):
      t_ef[(e_i, f_j)] = 0.25 # uniform initialization

for iteration in opts.num_iters:
  # initialize counts and totals
  count_ef = {}
  total_f = {}
  for (e_i, f_j) in t_ef.keys():
    count_ef[(e_i, f_j)] = 0
    total_f[f_j] = 0

  for (e, f) in bitext:
    # compute normalization
    s_total = {}
    for e_i in set(e):
      s_total[e_i] = 0
      for f_j in set(f):
        s_total[e_i] += t_ef[(e_i, f_j)]

    # collect counts
    for e_i in set(e):
      for f_j in set(f):
        count_ef[(e_i, f_j)] += ( t_ef[(e_i, f_j)] / s_total[e_i] )
        total_f[f_j] += ( t_ef[(e_i, f_j)] / s_total[e_i] )

  # estimate probabilities
  for (e_i, f_j) in t_ef.keys():
    t_ef[(e_i, f_j)] = count_ef[(e_i, f_j)] / total_f[f_j]

# generate optimal alignments
for (e, f) in bitext:
  for (i, e_i) in enumerate(e): 
    best_prob = 0
    best_j = 0
    for (j, f_j) in enumerate(f):
      if t_ef[(e_i, f_j)] > best_prob:
        best_prob = t_ef[(e_i, f_j)]
        best_j = j
    sys.stdout.write("%i-%i " % (i, best_j))
  sys.stdout.write("\n")
